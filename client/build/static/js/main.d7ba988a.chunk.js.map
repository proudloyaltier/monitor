{"version":3,"sources":["components/navbar.jsx","components/sensor-history-graph.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Navbar","bg","variant","Brand","React","Component","SensorHistoryGraph","state","chartType","data","this","fetch","then","response","json","error","Error","setState","Date","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAaeA,E,iLARX,OACE,kBAAC,IAAD,CAAsBC,GAAG,OAAOC,QAAQ,QACtC,kBAAC,IAAqBC,MAAtB,qB,GAJaC,IAAMC,W,QC2BZC,E,2MA1BbC,MAAQ,G,wEAGN,OACE,kBAAC,IAAD,CAAyBC,UAAU,OAAOC,KAAMC,KAAKH,MAAME,S,0CAIzC,IAAD,OACnBE,MAAM,wBAAwBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAH,GAAS,IACpEM,EAAUN,EAAVM,MAER,GAAIA,EAAO,MAAM,IAAIC,MAAMD,GAE3B,EAAKE,SAAS,CACZR,KAAM,CACJ,CAAC,OAAQ,cAAe,KAAM,YAC9B,CAAC,IAAIS,KAAK,cAAgB,EAAG,IAAK,KAClC,CAAC,IAAIA,KAAK,YAAgB,EAAG,IAAK,KAClC,CAAC,IAAIA,KAAK,YAAgB,EAAG,IAAK,e,GApBXd,IAAMC,WCiBxBc,E,iLAZX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,KACE,kBAAC,EAAD,Y,GAPQhB,IAAMC,WCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.d7ba988a.chunk.js","sourcesContent":["import React from 'react'\nimport * as ReactBoostrap from 'react-bootstrap'\n\nclass Navbar extends React.Component {\n  render () {\n    return (\n      <ReactBoostrap.Navbar bg=\"dark\" variant=\"dark\">\n        <ReactBoostrap.Navbar.Brand>Monitor</ReactBoostrap.Navbar.Brand>\n      </ReactBoostrap.Navbar>\n    )\n  }\n}\n\nexport default Navbar","import React from 'react'\nimport * as ReactGoogleCharts from 'react-google-charts'\n\nclass SensorHistoryGraph extends React.Component {\n  state = {}\n\n  render () {\n    return (\n      <ReactGoogleCharts.Chart chartType=\"Line\" data={this.state.data}></ReactGoogleCharts.Chart>\n    )\n  }\n\n  componentDidMount () {\n    fetch('/api/sensors/history').then(response => response.json()).then(data => {\n      const { error } = data\n\n      if (error) throw new Error(error)\n\n      this.setState({\n        data: [\n          ['Time', 'Temperature', 'pH', 'Salinity'],\n          [new Date(1569951085000), 6, 7.4, 6.1],\n          [new Date(1569959200000), 5, 7.6, 6.7],\n          [new Date(1572566400000), 4, 8.1, 6.3]\n        ]\n      })\n    })\n  }\n}\n\nexport default SensorHistoryGraph","import React from 'react'\nimport * as ReactBoostrap from 'react-bootstrap'\nimport '../bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from './navbar'\nimport SensorHistoryGraph from './sensor-history-graph'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <br />\n        <ReactBoostrap.Container>\n          <SensorHistoryGraph />\n        </ReactBoostrap.Container>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()"],"sourceRoot":""}