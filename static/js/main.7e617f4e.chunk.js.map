{"version":3,"sources":["components/navbar.jsx","components/sensor-history-graph.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Navbar","bg","variant","Brand","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","SensorHistoryGraph","state","headers","rows","this","chartType","data","concat","ref","on","child","row","Date","Number","parseInt","key","Object","entries","val","sensors","name","value","includes","push","parseFloat","setState","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAaeA,E,iLARX,OACE,kBAAC,IAAD,CAAsBC,GAAG,OAAOC,QAAQ,QACtC,kBAAC,IAAqBC,MAAtB,qB,GAJaC,IAAMC,W,wBCC3BC,gBAAuB,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAWR,aAgCFS,E,2MA7BbC,MAAQ,CAAEC,QAAS,CAAC,QAASC,KAAM,I,wEAExB,IAAD,EACkBC,KAAKH,MAAvBC,EADA,EACAA,QAASC,EADT,EACSA,KAEjB,OACE,kBAAC,IAAD,CAAyBE,UAAU,OAAOC,KAAM,CAACJ,GAASK,OAAOJ,O,0CAI/C,IAAD,OACXD,EAAYE,KAAKH,MAAjBC,QAERH,EAASS,IAAI,WAAWC,GAAG,eAAe,SAAAC,GAGxC,IAFA,IAAMC,EAAM,CAAC,IAAIC,KAAkC,IAA7BC,OAAOC,SAASJ,EAAMK,OAE5C,MAA4BC,OAAOC,QAAQP,EAAMQ,MAAMC,SAAvD,eAAiE,CAAC,IAAD,0BAArDC,EAAqD,KAA/CC,EAA+C,KAC1DnB,EAAQoB,SAASF,IACpBlB,EAAQqB,KAAKH,GAGfT,EAAIY,KAAKV,OAAOW,WAAWH,IAG7B,EAAKI,SAAS,CAAEvB,UAASC,KAAM,EAAKF,MAAME,KAAKI,OAAO,CAACI,a,GAzB5BtB,IAAMC,WCIxBoC,E,iLAZX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,KACE,kBAAC,EAAD,Y,GAPQtC,IAAMC,WCMJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7e617f4e.chunk.js","sourcesContent":["import React from 'react'\nimport * as ReactBoostrap from 'react-bootstrap'\n\nclass Navbar extends React.Component {\n  render () {\n    return (\n      <ReactBoostrap.Navbar bg=\"dark\" variant=\"dark\">\n        <ReactBoostrap.Navbar.Brand>Monitor</ReactBoostrap.Navbar.Brand>\n      </ReactBoostrap.Navbar>\n    )\n  }\n}\n\nexport default Navbar","import React from 'react'\nimport * as ReactGoogleCharts from 'react-google-charts'\nimport * as firebase from 'firebase'\n\nfirebase.initializeApp({\n  apiKey: 'AIzaSyB87R_NkLPy2lUQFHb_3japiTDrlJkvp7c',\n  authDomain: 'forcloud-monitor-db.firebaseapp.com',\n  databaseURL: 'https://forcloud-monitor-db.firebaseio.com',\n  projectId: 'forcloud-monitor-db',\n  storageBucket: '',\n  messagingSenderId: '538640326535',\n  appId: '1:538640326535:web:b62493e6dd63f11b48bd22'\n})\n\nconst database = firebase.database()\n\nclass SensorHistoryGraph extends React.Component {\n  state = { headers: ['Time'], rows: [] }\n\n  render () {\n    const { headers, rows } = this.state\n\n    return (\n      <ReactGoogleCharts.Chart chartType=\"Line\" data={[headers].concat(rows)}></ReactGoogleCharts.Chart>\n    )\n  }\n\n  componentDidMount () {\n    const { headers } = this.state\n\n    database.ref('history').on('child_added', child => {\n      const row = [new Date(Number.parseInt(child.key) * 1000)]\n\n      for (const [name, value] of Object.entries(child.val().sensors)) {\n        if (!headers.includes(name)) {\n          headers.push(name)\n        }\n\n        row.push(Number.parseFloat(value))\n      }\n\n      this.setState({ headers, rows: this.state.rows.concat([row]) })\n    })\n  }\n}\n\nexport default SensorHistoryGraph","import React from 'react'\nimport * as ReactBoostrap from 'react-bootstrap'\nimport '../bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from './navbar'\nimport SensorHistoryGraph from './sensor-history-graph'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <br />\n        <ReactBoostrap.Container>\n          <SensorHistoryGraph />\n        </ReactBoostrap.Container>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()"],"sourceRoot":""}